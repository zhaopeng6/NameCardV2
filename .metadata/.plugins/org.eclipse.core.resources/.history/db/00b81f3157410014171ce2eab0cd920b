package com.example.namecardv1;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.List;

import com.parse.FindCallback;
import com.parse.GetCallback;
import com.parse.ParseException;
import com.parse.ParseObject;
import com.parse.ParseQuery;
import com.parse.ParseUser;

import me.imid.swipebacklayout.lib.SwipeBackLayout;
import me.imid.swipebacklayout.lib.app.SwipeBackActivity;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.os.Vibrator;
import android.provider.MediaStore;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.hardware.Camera;
import java.lang.Object;

public class Design extends SwipeBackActivity implements OnClickListener {

	private static final int VIBRATE_DURATION = 20;
	private SwipeBackLayout mSwipeBackLayout;
	private static final int REQUEST_TAKE_PHOTO = 1;
	private static final int REQUEST_SELECT_PHOTO = 2;
	Camera camera;	
	String mCurrentPhotoPath;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_design);
		
		mSwipeBackLayout = getSwipeBackLayout();
		mSwipeBackLayout.setEdgeTrackingEnabled(SwipeBackLayout.EDGE_ALL);
		mSwipeBackLayout.addSwipeListener(new SwipeBackLayout.SwipeListener() {
			@Override
			public void onScrollStateChange(int state, float scrollPercent) {
			}
			@Override
			public void onEdgeTouch(int edgeFlag) {
				vibrate(VIBRATE_DURATION);
			}
			@Override
			public void onScrollOverThreshold() {
				vibrate(VIBRATE_DURATION);
			}
		});
		
		ParseUser user = ParseUser.getCurrentUser();
		
		ParseQuery<ParseObject> query = ParseQuery.getQuery("ECardInfo");	
		query.whereEqualTo("userID", user.getObjectId());
		query.findInBackground(new FindCallback<ParseObject>() {
		  
			@Override
			public void done(List<ParseObject> objects, ParseException e) {
				// TODO Auto-generated method stub
				
				if (e == null) {
				      // object will be your game score
					ParseObject object = objects.get(0);
			    	EditText name = (EditText) findViewById(R.id.FirstName);
					name.setText(object.getString("firstName"));
					name = (EditText) findViewById(R.id.LastName);
					name.setText(object.getString("lastName"));
					name = (EditText) findViewById(R.id.Company);
					name.setText(object.getString("company"));
					name = (EditText) findViewById(R.id.Title);
					name.setText(object.getString("title"));
//					testObject.put("street", "46 Pilgrim St");
//					testObject.put("city", "Cambridge");
//					testObject.put("state", "MA");
//					testObject.put("zipcode", "02139");
					name = (EditText) findViewById(R.id.tel);
					name.setText(object.getString("tel"));
//					testObject.put("fax", "74837593");
					name = (EditText) findViewById(R.id.email);
					name.setText(object.getString("email"));
					name = (EditText) findViewById(R.id.link);
					name.setText(object.getString("link"));
				} 
				else {
				      // something went wrong
				}
			}			
		});	
		
		Button buttonSend = (Button) findViewById(R.id.buttonSend);
		buttonSend.setOnClickListener(new OnClickListener(){
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				ParseUser user = ParseUser.getCurrentUser();
				
				ParseQuery<ParseObject> query = ParseQuery.getQuery("ECardInfo");	
				query.whereEqualTo("userID", user.getObjectId());
				query.findInBackground(new FindCallback<ParseObject>() {					  
					@Override
					public void done(List<ParseObject> objects, ParseException e) {
						// TODO Auto-generated method stub
						
						if (e == null) {
						      // object will be your game score
							ParseObject object = objects.get(0);
							EditText name = (EditText) findViewById(R.id.FirstName);
							object.put("firstName", name.getText().toString());
							name = (EditText) findViewById(R.id.LastName);
							object.put("lastName", name.getText().toString());
							name = (EditText) findViewById(R.id.Company);
							object.put("company", name.getText().toString());
							name = (EditText) findViewById(R.id.Title);
							object.put("title", name.getText().toString());
							name = (EditText) findViewById(R.id.tel);
							object.put("tel", name.getText().toString());
							name = (EditText) findViewById(R.id.email);
							object.put("email", name.getText().toString());
							name = (EditText) findViewById(R.id.link);
							object.put("link", name.getText().toString());
											
							object.saveInBackground();	
						} 
						else {
						      // something went wrong
						}
					}			
				});		
				
					
			}	
		});
		
		Button buttonRecv = (Button) findViewById(R.id.buttonRecv);
		buttonRecv.setOnClickListener(new OnClickListener(){
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				ParseUser user = ParseUser.getCurrentUser();
				
				ParseQuery<ParseObject> query = ParseQuery.getQuery("ECardInfo");	
				query.whereEqualTo("userID", user.getObjectId());
				query.findInBackground(new FindCallback<ParseObject>() {
				  
					@Override
					public void done(List<ParseObject> objects, ParseException e) {
						// TODO Auto-generated method stub
						
						if (e == null) {
						      // object will be your game score
							ParseObject object = objects.get(0);
					    	EditText name = (EditText) findViewById(R.id.FirstName);
							name.setText(object.getString("firstName"));
							name = (EditText) findViewById(R.id.LastName);
							name.setText(object.getString("lastName"));
							name = (EditText) findViewById(R.id.Company);
							name.setText(object.getString("company"));
							name = (EditText) findViewById(R.id.Title);
							name.setText(object.getString("title"));
//							testObject.put("street", "46 Pilgrim St");
//							testObject.put("city", "Cambridge");
//							testObject.put("state", "MA");
//							testObject.put("zipcode", "02139");
							name = (EditText) findViewById(R.id.tel);
							name.setText(object.getString("tel"));
//							testObject.put("fax", "74837593");
							name = (EditText) findViewById(R.id.email);
							name.setText(object.getString("email"));
							name = (EditText) findViewById(R.id.link);
							name.setText(object.getString("link"));
						} 
						else {
						      // something went wrong
						}
					}			
				});			
			}			
		});
	}
	
	private void restoreTrackingMode() {
		mSwipeBackLayout.setEdgeTrackingEnabled(SwipeBackLayout.EDGE_ALL);
	}

	private void vibrate(long duration) {
		Vibrator vibrator = (Vibrator) getSystemService(Context.VIBRATOR_SERVICE);
		long[] pattern = { 0, duration };
		vibrator.vibrate(pattern, -1);
	}
		
	@Override
	public void onClick(View v) {
		// TODO Auto-generated method stub
		
	}
	
	public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState ){
		View v = inflater.inflate(R.layout.activity_design, container, false);
		
		Button camButton = (Button) v.findViewById(R.id.CameraButton);
		Button galleryButton = (Button) v.findViewById(R.id.SearchPhoneButton);
		
		camButton.setOnClickListener(new OnClickListener(){
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				Intent takePictureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
			    if (takePictureIntent.resolveActivity(getActivity().getPackageManager()) != null) {
			    	File photoFile = null;
			        try {
			            photoFile = createImageFile();
			        } catch (IOException ex) {
			            // Error occurred while creating the File
			            Log.e("Cam: ", "Fail");
			        }
			        // Continue only if the File was successfully created
			        if (photoFile != null) {
			            takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT,
			                    Uri.fromFile(photoFile));
			            startActivityForResult(takePictureIntent, REQUEST_TAKE_PHOTO);
			            // if getActivity used, onActivityResults will be bypassed
			            System.out.println(mCurrentPhotoPath);
			        }
			    }
			}		
		});
		
		galleryButton.setOnClickListener(new OnClickListener(){
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				Intent photoPickerIntent = new Intent(Intent.ACTION_PICK);
				photoPickerIntent.setType("image/*");
				startActivityForResult(photoPickerIntent, REQUEST_SELECT_PHOTO);
			}		
		});
		
		return v;
	}
	
		private File createImageFile() throws IOException {
	    // Create an image file name
	    String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date());
	    String imageFileName = "JPEG_" + timeStamp + "_";
	    File storageDir = Environment.getExternalStoragePublicDirectory(
	            Environment.DIRECTORY_PICTURES);
	    File imageFile = File.createTempFile(
	        imageFileName,  /* prefix */
	        ".jpg",         /* suffix */
	        storageDir      /* directory */
	    );
 
	    // Save a file: path for use with ACTION_VIEW intents
	    
	    mCurrentPhotoPath = imageFile.getAbsolutePath();
	    return imageFile;
	}
	
	@Override 
	public void onActivityResult(int requestCode, int resultCode, Intent intent) {
		
		switch(requestCode) {
			case REQUEST_TAKE_PHOTO:
				if (resultCode== Activity.RESULT_OK){
		        	
		        } else {
		        	File tempFile = new File(mCurrentPhotoPath);
		        	boolean deleted = tempFile.delete();
		        	// The empty file will be created before taking the pic, it's deleted here 
		        }
			case REQUEST_SELECT_PHOTO:
				if (resultCode== Activity.RESULT_OK){
		        	
		        } else {
		        	
		        	// The empty file will be created before taking the pic, it's deleted here 
		        }
				
		}
        
  }

}
